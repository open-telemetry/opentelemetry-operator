# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: instrumentation-java-tls
spec:
  bindings:
    - name: otlpFilePath
      value: /tmp/instrumentation-java-tls.json
  steps:
  - name: step-00
    try:
    # In OpenShift, when a namespace is created, all necessary SCC annotations are automatically added. However, if a namespace is created using a resource file with only selected SCCs, the other auto-added SCCs are not included. Therefore, the UID-range and supplemental groups SCC annotations must be set after the namespace is created.
    - command:
        entrypoint: kubectl
        args:
        - annotate
        - namespace
        - ${NAMESPACE}
        - openshift.io/sa.scc.uid-range=1000/1000
        - --overwrite
    - command:
        entrypoint: kubectl
        args:
        - annotate
        - namespace
        - ${NAMESPACE}
        - openshift.io/sa.scc.supplemental-groups=3000/3000
        - --overwrite
    - apply:
        file: ca.yaml
    - apply:
        file: client-secret.yaml
    - apply:
        file: server-secret.yaml
    - apply:
        file: 00-install-collector.yaml
    - apply:
        file: 00-install-instrumentation.yaml
  - name: step-01
    try:
    - apply:
        file: 01-install-app.yaml
    - assert:
        file: 01-assert.yaml
    catch:
      - podLogs:
          selector: app=my-java
  - name: Make a request to the app
    try:
      - command:
          entrypoint: kubectl
          args:
            - get
            - pod
            - -n
            - ${NAMESPACE}
            - -l
            - app=my-java
            - -o
            - jsonpath={.items[0].metadata.name}
          outputs:
          - name: podName
            value: ($stdout)
      - proxy:
          apiVersion: v1
          kind: Pod
          name: ($podName)
          namespace: ${NAMESPACE}
          port: "8080"
  - name: Wait for telemetry data to be collected
    try:
    - script:
        env:
          - name: LABEL_SELECTOR
            value: "app.kubernetes.io/name=simplest-collector"
          - name: CONTAINER_NAME
            value: "otc-container" 
          - name: RETRY_TIMEOUT
            value: "120"
          - name: RETRY_SLEEP
            value: "5"
          - name: SEARCH_STRINGS_ENV
            value: |
              AggregationTemporality: Cumulative
              Name: process.runtime.jvm.memory.usage
              Description: Measure of memory used
        timeout: 2m
        content: ../../test-e2e-apps/scripts/check_pod_logs.sh
  - name: Fetch the telemetry data exported by file exporter
    try:
    - command:
        entrypoint: kubectl
        args:
          - get
          - pod
          - -n
          - ${NAMESPACE}
          - -l
          - app.kubernetes.io/name=simplest-collector
          - -o
          - jsonpath={.items[0].metadata.name}
        outputs:
        - name: podName
          value: ($stdout)
    - command:
        env:
          - name: POD_NAME
            value: ($podName)
          - name: OTLP_FILE_PATH
            value: ($otlpFilePath)
          - name: CONTAINER_NAME
            value: "alpine"
        entrypoint: /bin/bash
        check:
          ($error == null): true
        args:
        - -c
        - |
          echo "Copying logs from pod ${POD_NAME} in namespace ${NAMESPACE}..."
          kubectl cp "${NAMESPACE}/${POD_NAME}:/otlp/otel.json" ${OTLP_FILE_PATH} -c ${CONTAINER_NAME}
    catch:
      - podLogs:
          namespace: ${NAMESPACE}
          selector: app=my-java
          container: otc-container
          tail: 100
  - name: Validate telemetry data
    try:
    - command:
        timeout: 1m
        env:
          - name: TELEMETRY_CHECK
            value: "traces,metrics"
          - name: OTLP_FILE_PATH
            value: ($otlpFilePath)
        entrypoint: go
        args:
          - test
          - ../../test-e2e-apps/otel-telemetry-validator/otel_telemetry_validator_test.go
        check:
          ($error == null): true
