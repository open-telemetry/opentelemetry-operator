# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  creationTimestamp: null
  name: instrumentation-python-multicontainer
spec:
  steps:
  - name: step-00
    try:
    # In OpenShift, when a namespace is created, all necessary SCC annotations are automatically added. However, if a namespace is created using a resource file with only selected SCCs, the other auto-added SCCs are not included. Therefore, the UID-range and supplemental groups SCC annotations must be set after the namespace is created.
    - command:
        entrypoint: kubectl
        args:
        - annotate
        - namespace
        - ${NAMESPACE}
        - openshift.io/sa.scc.uid-range=1000/1000
        - --overwrite
    - command:
        entrypoint: kubectl
        args:
        - annotate
        - namespace
        - ${NAMESPACE}
        - openshift.io/sa.scc.supplemental-groups=3000/3000
        - --overwrite
  - name: step-00
    try:
    - apply:
        file: 00-install-collector.yaml
    - apply:
        file: 00-install-instrumentation.yaml
  - name: step-01
    try:
    - apply:
        file: 01-install-app.yaml
    - assert:
        file: 01-assert.yaml
    catch:
      - podLogs:
          selector: app=my-python-multi
  - name: Make a request to the app
    try:
      - command:
          entrypoint: kubectl
          args:
            - get
            - pod
            - -n
            - ${NAMESPACE}
            - -l
            - app=my-python-multi
            - -o
            - jsonpath={.items[0].metadata.name}
          outputs:
          - name: podName
            value: ($stdout)
      - proxy:
          apiVersion: v1
          kind: Pod
          name: ($podName)
          namespace: ${NAMESPACE}
          port: "8080"
  - name: Wait for telemetry data
    try:
    - script:
        env:
          - name: LABEL_SELECTOR
            value: "app=my-python-multi"
          - name: CONTAINER_NAME
            value: "otc-container" 
          - name: RETRY_TIMEOUT
            value: "120"
          - name: RETRY_SLEEP
            value: "5"
          - name: SEARCH_STRINGS_ENV
            value: |
              Name: system.memory.usage
              Description: System memory usage
        timeout: 2m
        content: ../../test-e2e-apps/scripts/check_pod_logs.sh
  - name: Check the instrumented app has sent the telemetry data successfully
    try:
      - command:
          entrypoint: kubectl
          args:
            - get
            - pod
            - -n
            - ${NAMESPACE}
            - -l
            - app=my-python-multi
            - -o
            - jsonpath={.items[0].metadata.name}
          outputs:
          - name: podName
            value: ($stdout)
      - script:
          env:
          - name: podName
            value: ($podName)
          content: |
            #!/bin/bash
            # set -ex
            kubectl get --raw /api/v1/namespaces/$NAMESPACE/pods/${podName}:8888/proxy/metrics
          outputs:
          - name: metrics
            value: (x_metrics_decode($stdout))
          check:
            ($error == null): true
      - assert:
          resource:
            ($metrics[?as_string(metric."__name__") == 'otelcol_exporter_sent_spans_total'].value | [0] > `1`): true
            ($metrics[?as_string(metric."__name__") == 'otelcol_receiver_accepted_spans_total'].value | [0] > `1`): true
            ($metrics[?as_string(metric."__name__") == 'otelcol_exporter_sent_metric_points_total'].value | [0] > `1`): true
            ($metrics[?as_string(metric."__name__") == 'otelcol_receiver_accepted_metric_points_total'].value | [0] > `1`): true
    catch:
      - podLogs:
          selector: app=my-python-multi
          container: otc-container
  - name: step-02
    try:
    - command:
        entrypoint: kubectl
        args:
          - get
          - pod
          - -n
          - ${NAMESPACE}
          - -l
          - app=my-python-multi
          - -o
          - jsonpath={.items[0].metadata.name}
        outputs:
        - name: podName
          value: ($stdout)
    - apply:
        file: 02-install-app.yaml
    - assert:
        file: 02-assert.yaml
    - wait:
        apiVersion: v1
        kind: Pod
        name: ($podName)
        namespace: ($namespace)
        timeout: 1m
        for:
          deletion: {}
    catch:
      - podLogs:
          selector: app=my-python-multi
  - name: Make a request to the app
    try:
      - command:
          entrypoint: kubectl
          args:
            - get
            - pod
            - -n
            - ${NAMESPACE}
            - -l
            - app=my-python-multi
            - -o
            - jsonpath={.items[0].metadata.name}
          outputs:
          - name: podName
            value: ($stdout)
      - proxy:
          apiVersion: v1
          kind: Pod
          name: ($podName)
          namespace: ${NAMESPACE}
          port: "8080"
  - name: Wait for telemetry data
    try:
    - script:
        env:
          - name: LABEL_SELECTOR
            value: "app=my-python-multi"
          - name: CONTAINER_NAME
            value: "otc-container" 
          - name: RETRY_TIMEOUT
            value: "120"
          - name: RETRY_SLEEP
            value: "5"
          - name: SEARCH_STRINGS_ENV
            value: |
              Name: system.memory.usage
              Description: System memory usage
        timeout: 2m
        content: ../../test-e2e-apps/scripts/check_pod_logs.sh
  - name: Check the instrumented app has sent the telemetry data successfully
    try:
      - command:
          entrypoint: kubectl
          args:
            - get
            - pod
            - -n
            - ${NAMESPACE}
            - -l
            - app=my-python-multi
            - -o
            - jsonpath={.items[0].metadata.name}
          outputs:
          - name: podName
            value: ($stdout)
      - script:
          env:
          - name: podName
            value: ($podName)
          content: |
            #!/bin/bash
            # set -ex
            kubectl get --raw /api/v1/namespaces/$NAMESPACE/pods/${podName}:8888/proxy/metrics
          outputs:
          - name: metrics
            value: (x_metrics_decode($stdout))
          check:
            ($error == null): true
      - assert:
          resource:
            ($metrics[?as_string(metric."__name__") == 'otelcol_exporter_sent_spans_total'].value | [0] > `1`): true
            ($metrics[?as_string(metric."__name__") == 'otelcol_receiver_accepted_spans_total'].value | [0] > `1`): true
            ($metrics[?as_string(metric."__name__") == 'otelcol_exporter_sent_metric_points_total'].value | [0] > `1`): true
            ($metrics[?as_string(metric."__name__") == 'otelcol_receiver_accepted_metric_points_total'].value | [0] > `1`): true
    catch:
      - podLogs:
          selector: app=my-python-multi
          container: otc-container
