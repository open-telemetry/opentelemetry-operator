apiVersion: v1
kind: ServiceAccount
metadata:
  name: ta
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-view
rules:
- apiGroups: [""]
  resources: [ "pods" ]
  verbs: [ "get", "list", "watch"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors"]
  verbs: ["get", "list", "watch"]
---
apiVersion: kuttl.dev/v1beta1
kind: TestStep
commands:
  - command: kubectl -n $NAMESPACE create rolebinding default-view-$NAMESPACE --role=pod-view --serviceaccount=$NAMESPACE:ta
  # Annotate the namespace to allow the application to run using an specific group and user in OpenShift
  # https://docs.openshift.com/dedicated/authentication/managing-security-context-constraints.html
  # This annotation has no effect in Kubernetes
  - command: kubectl annotate namespace ${NAMESPACE} openshift.io/sa.scc.uid-range=1000/1000 --overwrite
  - command: kubectl annotate namespace ${NAMESPACE} openshift.io/sa.scc.supplemental-groups=3000/1000 --overwrite
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: stateful
spec:
  mode: statefulset
  volumes:
    - name: testvolume
  volumeMounts:
    - name: testvolume
      mountPath: /usr/share/testvolume
  volumeClaimTemplates:
    - metadata:
        name: testvolume
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi
  targetAllocator:
    enabled: true
    serviceAccount: ta
    securityContext:
      runAsUser: 1000
      runAsGroup: 3000
      privileged: true
    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 3000
      fsGroup: 2000
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: ingress-ready
                  operator: In
                  values:
                    - "true"
    prometheusCR:
      enabled: true
    env:
      - name: TEST_ENV
        value: "test"
  config: |
    receivers:
      jaeger:
          protocols:
            grpc:

      # Collect own metrics
      prometheus:
        config:
          scrape_configs:
          - job_name: 'otel-collector'
            scrape_interval: 10s
            static_configs:
            - targets: [ '0.0.0.0:8888' ]
            relabel_configs:
            - regex: __meta_kubernetes_node_label_(.+)
              action: labelmap
              replacement: $$1
            - regex: test_.*
              action: labeldrop  
            - regex: 'metrica_*|metricb.*'
              action: labelkeep
              replacement: $$1
    
    processors:

    exporters:
      debug:
    service:
      pipelines:
        traces:
          receivers: [jaeger]
          processors: []
          exporters: [debug]
